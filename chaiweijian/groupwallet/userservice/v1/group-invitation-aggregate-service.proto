// Copyright 2021 Chai Wei Jian
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package chaiweijian.groupwallet.userservice.v1;

option java_multiple_files = true;
option java_package = "com.chaiweijian.groupwallet.userservice.v1";
option java_outer_classname = "GroupInvitationAggregateServiceProto";

import "chaiweijian/groupwallet/userservice/v1/group-invitation.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";

// Define the group invitation service.
service GroupInvitationAggregateService {
  // List group invitations for a specific user
  rpc ListGroupInvitations(ListGroupInvitationsRequest) returns (ListGroupInvitationsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=users/*}/groupInvitations"
    };
    option (google.api.method_signature) = "parent";
  }

  // Create a new group invitation.
  rpc CreateGroupInvitation(CreateGroupInvitationRequest) returns (GroupInvitation) {
    option (google.api.http) = {
      post: "/v1/{parent=users/*}/groupInvitations"
      body: "group_invitation"
    };
    option (google.api.method_signature) = "parent,group_invitation";
  }

  // Accept the given group invitation.
  rpc AcceptGroupInvitation(AcceptGroupInvitationRequest) returns (GroupInvitation) {
    option (google.api.http) = {
      post: "/v1/{name=users/*/groupInvitations/*}:accept"
      body: "*"
    };
    option (google.api.method_signature) = "group_invitation";
  }

  // Reject the given group invitation.
  rpc RejectGroupInvitation(RejectGroupInvitationRequest) returns (GroupInvitation) {
    option (google.api.http) = {
      post: "/v1/{name=users/*/groupInvitations/*}:reject"
      body: "*"
    };
    option (google.api.method_signature) = "group_invitation";
  }

}

// Request to list group invitations
message ListGroupInvitationsRequest {
  // The parent, which owns this collection of group invitations.
  // Format: users/{user}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "groupwallet.chaiweijian.com/User"
    }];

  // The maximum number of group invitations to return. The service may return fewer than
  // this value.
  // If unspecified, at most 50 group invitations will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2;

  // A page token, received from a previous `ListGroupInvitations` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListGroupInvitations` must match
  // the call that provided the page token.
  string page_token = 3;
}

// Response for a list group invitation request
message ListGroupInvitationsResponse {
  // The group invitations from the specified publisher.
  repeated GroupInvitation group_invitations = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request to create a group invitation
message CreateGroupInvitationRequest {
  // The parent resource where this group invitation will be created.
  // Format: users/{user}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "groupwallet.chaiweijian.com/User"
    }];

  // The group invitation to create.
  GroupInvitation group_invitation = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request to accept a group invitation
message AcceptGroupInvitationRequest {
  // The group invitation to accept.
  GroupInvitation group_invitation = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request to reject a group invitation
message RejectGroupInvitationRequest {
  // The group invitation to reject.
  GroupInvitation group_invitation = 1 [(google.api.field_behavior) = REQUIRED];
}